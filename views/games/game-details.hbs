<script src="https://unpkg.com/gojs/release/go-debug.js"></script>
<script src='https://api.tiles.mapbox.com/mapbox-gl-js/v1.1.0/mapbox-gl.js'></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.19.0/axios.min.js"></script>

<div class="container">
<h1>Game details</h1>
  {{#each games}}
  <div class="row">
    <div class="col mx-auto">

      <!-- Profile widget -->
      <div class="bg-white rounded overflow-hidden">
        <div class="px-4 pt-0 pb-4" style="background-color: #131313;">
          <div class="media align-items-end profile-header">
            <div class="profile mr-3">
              <img id="cover-url" src="{{t_cover_big game.cover.url}}" class="rounded mb-2 img-thumbnail">
            </div>
            <div class="media-body mb-5 text-white">
              <h4 id="game-name" class="mt-0 mb-0 font-weight-bold">{{game.name}}</h4>
              <p id="release-date" class="small mb-4">{{toDate game.first_release_date}}</p>
            </div>
          </div>
        </div>

        <div class="bg-light p-4 d-flex justify-content-end text-center">
          <ul class="list-inline mb-0">
            <li class="list-inline-item">
              <h5 class="font-weight-bold mb-0 d-block">{{game.total_rating}}</h5>
            </li>
            <li class="list-inline-item">
              <h5 class="font-weight-bold mb-0 d-block">{{game.popularity}}</h5>
            </li>
            <li class="list-inline-item">
              <button class="btn btn-warning" id="game-favorite">Favorite</button>
            </li>
          </ul>
        </div>

        <div class="py-4">
          <h5 class="mb-3">Summary</h5>
          <div class="p-4 bg-light rounded shadow-sm">
            <p id="summary" class="font-italic mb-0">{{game.summary}}</p>
          </div>
        </div>

        <div class="py-4">
        <h5 class="mb-3">Genres</h5>
        <div class="p-4 bg-light rounded shadow-sm">
          <ol>
          {{#each game.genres}}
            <li>{{name}}</li>
          {{/each}}
        </ol>
        </div>
        </div>

        <div class="py-4">
        <h5 class="mb-3">Involved Companies</h5>
        <div class="p-4 bg-light rounded shadow-sm">
        <ol>
          {{#each game.involved_companies}}
            <li>{{company.name}}</li>
          {{/each}}
        </ol>
        </div>
        </div>

        <div class="py-4">
          <div class="d-flex align-items-center justify-content-between mb-3">
            <h5 class="mb-3">Screenshots</h5>
          </div>
          <div class="row">
            <div class="col">
              <div class="p-4 bg-light rounded shadow-sm">
              {{#each game.screenshots}}
              <img src="{{t_cover_big url}}" class="img-fluid rounded shadow-sm">
              {{/each}}
              </div>
            </div>
          </div>
          <div class="py-4">
            <h5 class="mb-3">Videos</h5>
            <div class="row">
              <div class="col">
                <div class="p-4 bg-light rounded shadow-sm">
                  {{#each game.videos}}
                  <iframe width="400" height="300" src="https://www.youtube.com/embed/{{video_id}}?enablejsapi=1">
                  </iframe>
                  {{/each}}
                </div>
              </div>
            </div>
          </div>
        </div>

      </div>
      
    </div>
  </div>
  {{/each}}
  <div>
  <h2 class="mb-3">Timeline</h2>
  <div id="myDiagramDiv" style="border: solid 1px black; height: 400px">
    <script>

      function timeLine(arr) {
        var $ = go.GraphObject.make; // for conciseness in defining templates
        var model = $(go.TreeModel);
        model.nodeDataArray = arr;

        myDiagram = $(
          go.Diagram,
          "myDiagramDiv", // must be the ID or reference to div
          {
            maxSelectionCount: 1, // users can select only one part at a time
            validCycle: go.Diagram.CycleDestinationTree, // make sure users can only create trees

            layout: $(go.TreeLayout, {
              treeStyle: go.TreeLayout.StyleLastParents,
              arrangement: go.TreeLayout.ArrangementHorizontal,

              // properties for most of the tree:
              angle: 180,
              layerSpacing: 80,

              // properties for the "last parents":
              alternateAngle: 180,
              alternateLayerSpacing: 80,
              alternateAlignment: go.TreeLayout.AlignmentBus,
              alternateNodeSpacing: 80
            }),
            "undoManager.isEnabled": true // enable undo & redo
          }
        );

        var levelColors = [
          "#AC193D",
          "#2672EC",
          "#8C0095",
          "#5133AB",
          "#008299",
          "#D24726",
          "#008A00",
          "#094AB2"
        ];

        // override TreeLayout.commitNodes to also modify the background brush based on the tree depth level
        myDiagram.layout.commitNodes = function () {
          go.TreeLayout.prototype.commitNodes.call(myDiagram.layout); // do the standard behavior
          // then go through all of the vertexes and set their corresponding node's Shape.fill
          // to a brush dependent on the TreeVertex.level value
          myDiagram.layout.network.vertexes.each(function (v) {
            if (v.node) {
              var level = v.level % levelColors.length;
              var color = levelColors[level];
              var shape = v.node.findObject("SHAPE");
              if (shape)
                shape.fill = $(go.Brush, "Linear", {
                  0: color,
                  1: go.Brush.lightenBy(color, 0.05),
                  start: go.Spot.Left,
                  end: go.Spot.Right
                });
            }
          });
        };

        // This function provides a common style for most of the TextBlocks.
        // Some of these values may be overridden in a particular TextBlock.
        function textStyle() {
          return { font: "9pt  Segoe UI,sans-serif", stroke: "white" };
        }

        // define the Node template
        myDiagram.nodeTemplate = $(
          go.Node,
          "Auto",
          // for sorting, have the Node.text be the data.name
          // new go.Binding("text", "name"),
          // bind the Part.layerName to control the Node's layer depending on whether it isSelected
          new go.Binding("layerName", "isSelected", function (sel) {
            return sel ? "Foreground" : "";
          }).ofObject(),
          // define the node's outer shape
          $(go.Shape, "Rectangle", {
            name: "SHAPE",
            fill: "white",
            stroke: null,
            // set the port properties:
            portId: "",
            cursor: "pointer"
          }),
          $(
            go.Panel, "Horizontal",
            $(
              go.Picture,
              {
                name: "Picture",
                desiredSize: new go.Size(150, 200),
                margin: new go.Margin(6, 8, 6, 10)
              },
              new go.Binding("source", "url")
            ),
            // define the panel where the text will appear
            $(
              go.Panel,
              "Table",
              {
                maxSize: new go.Size(200, 999),
                margin: new go.Margin(6, 10, 0, 3),
                defaultAlignment: go.Spot.Left
              },
              $(
                go.TextBlock,
                textStyle(), // the name
                {
                  row: 0,
                  column: 0,
                  columnSpan: 5,
                  font: "12pt Segoe UI,sans-serif",
                  isMultiline: false,
                  minSize: new go.Size(20, 16)
                },
                new go.Binding("text", "name").makeTwoWay()
              ),              
              $(
                go.TextBlock,
                textStyle(),
                {
                  row: 1,
                  column: 1,
                  columnSpan: 4,
                  isMultiline: false,
                  minSize: new go.Size(10, 14),
                  margin: new go.Margin(0, 0, 0, 3)
                },
                new go.Binding("text", "first_release_date").makeTwoWay()
              ),
              $(
                go.TextBlock,
                {
                  row: 2,
                  column: 2,
                  columnSpan: 4,
                  isMultiline: false,
                  minSize: new go.Size(10, 14),
                  margin: new go.Margin(0, 0, 0, 3)
                },
                new go.Binding("stroke", "color"),
                new go.Binding("text", "link")
              )
             
            ) // end Table Panel
          ) // end Horizontal Panel
        ); // end Node

        // the context menu allows users to make a position vacant,
        // remove a role and reassign the subtree, or remove a department

        // define the Link template
        myDiagram.linkTemplate = $(
          go.Link,
          { corner: 5 },
          $(go.Shape, { strokeWidth: 5, stroke: "#00a4a4" })
        ); // the link shape

        myDiagram.model = model;
      }

      timeLine({{{ json formatedResponse }}});

    </script>
  </div>
  <br>
  </div>
</div>

<script>

  document.getElementById('game-favorite').onclick = () => {

  let BASE_URL = "http://localhost:3000/favorites/add";
  let idGame = {{ gameId }};

  let name = document.getElementById("game-name").innerText;
  let coverUrl = document.getElementById("cover-url").getAttribute("src");
  let releaseDate = document.getElementById("release-date").innerText;
  let summary = document.getElementById("summary").innerText;

  axios
    .post(BASE_URL, {
      idGame,
      name,
      coverUrl,
      releaseDate,
      summary
    })
    .then(response => {
      console.log(response.data);
    })
    .catch(err => {
      console.log(err);
    });
  };

</script>

